*****************************************************************************
AUTHOR              :  Mala Sivarajan
PURPOSE             :  Sample script for the impact analysis at campaign x demo level
SERVER/DB URL PROD  :  jdbc:netezza://nantz40.nielsen.com:5480/MCH_NOCR_PROD_PG1
SERVER/DB URL UAT   :  jdbc:netezza://nantz42.nielsen.com:5480/schema_name or 
		                   jdbc:netezza://nantz53.nielsen.com:5480/schema_name 
TABLES              :  Campaign_gross_rating_point_fact, reportable_demographic, 
			                 CAMPAIGN_THIRD_PARTY_DETAIL, Campaign,reportable_geography        
*****************************************************************************

Step 1 – Pulling the estimated impressions and reach from the UAT tables
 
drop table table_Name_UAT;
create table table_Name_UAT as 
SELECT data_date,
       Campaign_ID,
       Geography_code, --- Country code
       a.DEMOGRAPHIC_ID,
       b.Name,
       DESKTOP_IMPRESSIONS AS DSK_IMPRESSIONS_UAT,
       DESKTOP_REACH AS DSK_UA_UAT,
       MOBILE_IMPRESSIONS AS MBL_IMPRESSIONS_UAT,
       MOBILE_REACH AS MBL_UA_UAT,
       IMPRESSIONS AS IMPRESSIONS_UAT,
       REACH AS UA_UAT,
       MOBILE_CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT AS 	MOBILE_CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_UAT,
       DESKTOP_CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT AS 	DESKTOP_CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_UAT,
       CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT AS CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_UAT
FROM schema_name..campaign_gross_rating_point_fact a 
JOIN schema_name..reportable_demographic b ON a.demographic_id = REPORTABLE_DEMOGRAPHIC_ID
WHERE AGGREGATION_TYPE = 2    --- campaign level data
AND   geography_code = 1001   --- US only (check for impacted countries)
AND   (a.IMPRESSIONS >= 1000 OR MOBILE_IMPRESSIONS >= 1000 OR DESKTOP_IMPRESSIONS >= 1000)
AND   DATA_DATE = ‘date’ --- data date when the reprocessing was done
AND   a.RELEASED_FOR_PROCESSING_FLAG = 'Y'
AND   DEMOGRAPHIC_ID NOT IN (2999,1999)  --- ignoring the total demo buckets 
AND   CAMPAIGN_ID IN (SELECT DISTINCT campaign_id
                      FROM schema_name..Campaign
                      WHERE RELEASED_FOR_PROCESSING_FLAG = 'Y'
                      AND   COLLECTION_START_DATE >= ‘start_date’) ----- check with App Dev
DISTRIBUTE ON RANDOM;
COMMIT;

Step 2 – Pulling the estimated impressions and reach from the Production tables 

drop table table_Name_PROD;
create table table_Name_PROD as 
select data_date,
	Campaign_ID,
       GEOGRAPHY_CODE,  --- Country code
       a.DEMOGRAPHIC_ID, 
       b.Name, 
       DESKTOP_IMPRESSIONS AS DSK_IMPRESSIONS_PROD, DESKTOP_REACH AS DSK_UA_PROD,
       MOBILE_IMPRESSIONS AS MBL_IMPRESSIONS_PROD, MOBILE_REACH AS MBL_UA_PROD,
       IMPRESSIONS AS IMPRESSIONS_PROD, REACH AS UA_PROD,
	MOBILE_CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT AS 	MOBILE_CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_PROD,
	DESKTOP_CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT AS 		DESKTOP_CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_PROD
	CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT AS 	CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_PROD
from schema_name..campaign_gross_rating_point_fact a
JOIN schema_name..reportable_demographic b ON a.demographic_id = REPORTABLE_DEMOGRAPHIC_ID
WHERE AGGREGATION_TYPE = 2   --- campaign level data
and geography_code = 1001    --- US only (check for impacted countries)
AND (a.IMPRESSIONS >= 1000 or MOBILE_IMPRESSIONS >=1000 or DESKTOP_IMPRESSIONS >=1000) 
AND DATA_DATE = ‘date’ --- data date when the reprocessing was done
AND a.RELEASED_FOR_PROCESSING_FLAG = 'Y' 
AND DEMOGRAPHIC_ID not in (2999,1999)  --- ignoring the total demo buckets
AND CAMPAIGN_ID in (select DISTINCT campaign_id from schema_name..Campaign 
WHERE RELEASED_FOR_PROCESSING_FLAG ='Y' 
AND COLLECTION_START_DATE >='start_date') --- check with App Dev
DISTRIBUTE ON RANDOM;
commit;

Step 3: Joining the above PROD and UAT table and pulling campaign x Demo % Diff 

drop table table_camp_Demo;
create table table_Plc_Demo as 
SELECT a.data_date,
       a.CAMPAIGN_ID,
       a.geography_code,
       a.DEMOGRAPHIC_ID,
       a.name,
       MOBILE_CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_PROD,
       MOBILE_CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_UAT,
       DESKTOP_CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_PROD,
       DESKTOP_CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_UAT,
       CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_PROD,
       CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_UAT,
       DSK_UA_PROD,
       DSK_UA_UAT,
       (DSK_UA_UAT - DSK_UA_PROD) AS DSK_UA_DIFF,
       (CASE WHEN DSK_UA_PROD = 0 then 0 ELSE (DSK_UA_UAT / DSK_UA_PROD -1)*100 	END)::numeric(38,10) AS PERC_DIFF_DSK_UA,
       MBL_UA_PROD,
       MBL_UA_UAT,
       (MBL_UA_UAT - MBL_UA_PROD) AS MBL_UA_DIFF,
       (CASE WHEN MBL_UA_PROD = 0 then 0 ELSE (MBL_UA_UAT / MBL_UA_PROD -1)*100 	END)::numeric(38,10) AS PERC_DIFF_MBL_UA,
       UA_PROD,
       UA_UAT,
       (UA_UAT - UA_PROD) AS UA_DIFF,
       (CASE WHEN UA_PROD = 0 then 0 ELSE (UA_UAT / UA_PROD -1)*100 END)::numeric(38,10) AS 	PERC_DIFF_UA,
       DSK_IMPRESSIONS_PROD,
       DSK_IMPRESSIONS_UAT,
       (DSK_IMPRESSIONS_UAT - DSK_IMPRESSIONS_PROD) AS DSK_IMPRESSIONS_DIFF,
       (CASE WHEN DSK_IMPRESSIONS_PROD = 0 then 0 ELSE (DSK_IMPRESSIONS_UAT / 	DSK_IMPRESSIONS_PROD -1)*100 END)::numeric(38,10) AS PERC_DIFF_DSK_IMPR,
       MBL_IMPRESSIONS_PROD,
       MBL_IMPRESSIONS_UAT,
       (MBL_IMPRESSIONS_UAT - MBL_IMPRESSIONS_PROD) AS MBL_IMPRESSIONS_DIFF,
       (CASE WHEN MBL_IMPRESSIONS_PROD = 0 then 0 ELSE (MBL_IMPRESSIONS_UAT / 	MBL_IMPRESSIONS_PROD -1)*100 END)::numeric(38,10) AS PERC_DIFF_MBL_IMPR,
       IMPRESSIONS_PROD,
       IMPRESSIONS_UAT,
       (IMPRESSIONS_UAT - IMPRESSIONS_PROD) AS IMPRESSIONS_DIFF,
       (CASE WHEN IMPRESSIONS_PROD = 0 then 0 ELSE (IMPRESSIONS_UAT / IMPRESSIONS_PROD -1)*100 	END)::numeric(38,10) AS PERC_DIFF_IMPR
  FROM (SELECT * FROM table_name_PROD) a 
  JOIN (SELECT * FROM table_name_UAT) b ON a.data_date = b.data_date 
  AND a.Campaign_id = b.campaign_id 
  AND a.demographic_id = b.demographic_id 
  AND a.GEOGRAPHY_CODE = b.GEOGRAPHY_CODE 
  DISTRIBUTE ON RANDOM;
      
Step 4: Pulling the count impacted campaigns by + or - 10% UA diff

Select count(distinct campaign_id)  from table_camp_Demo 
where ((PERC_DIFF_DSK_UA > 10 or PERC_DIFF_DSK_UA <-10) or (PERC_DIFF_MBL_UA > 10 or PERC_DIFF_MBL_UA <-10) or (PERC_DIFF_UA > 10 or PERC_DIFF_UA <-10))

Step 5: Pulling the count impacted campaigns by + or - 10% Impression diff

Select count(distinct campaign_id) from table_camp_Demo 
where ((PERC_DIFF_DSK_IMPR > 10 or PERC_DIFF_DSK_IMPR <-10) or (PERC_DIFF_MBL_IMPR > 10 or PERC_DIFF_MBL_IMPR <-10) or (PERC_DIFF_IMPR > 10 or PERC_DIFF_IMPR <-10))

Step 6: Adding the owners, Target genders, and other info to produce the report

SELECT a.data_date,
       collection_start_date,
       c.CAMPAIGN_tag_ID,
       a.campaign_id,
       campaign_name,
       REPORTABLE_GEOGRAPHY_DESC AS country_Name,
       a.SITE_ID,
       a.Site_name,
       a.PLACEMENT_ID,
       a.placement_name,
       a.DEMOGRAPHIC_ID,
       a.name,
       DSK_UA_PROD,
       DSK_UA_UAT,
       DSK_UA_DIFF,
       PERC_DIFF_DSK_UA,
       MBL_UA_PROD,
       MBL_UA_UAT,
       MBL_UA_DIFF,
       PERC_DIFF_MBL_UA,
       UA_PROD,
       UA_UAT,
       UA_DIFF,
       PERC_DIFF_UA,
       TARGET_GENDER_ALPHA_TYPE_CODE AS Target_gender,
       TARGET_START_AGE,
       TARGET_END_AGE,
       MOBILE_ CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_PROD,
       MOBILE_ CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_UAT,
       DESKTOP_CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_PROD,
       DESKTOP_CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_UAT,
       CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_PROD,
       CAMPAIGN_TARGET_DEMOGRAPHIC_IMPRESSIONS_PERCENT_UAT,
       PRIMARY_OWNER,
       SECONDARY_OWNER
FROM table_camp_Demo a 
  JOIN (SELECT *
        FROM schema_name..campaign
        WHERE RELEASED_FOR_PROCESSING_FLAG = 'Y') b ON c.campaign_id = b.campaign_id 
  JOIN schema_name..reportable_geography g ON a.geography_code = g.REPORTABLE_GEOGRAPHY_CODE 
  LEFT JOIN (SELECT P.CAMPAIGN_ID,
                    PRIMARY_OWNER,
                    SECONDARY_OWNER
             FROM (SELECT DISTINCT CAMPAIGN_ID,
                          a.OWNER_NAME AS PRIMARY_OWNER,
                          OWNER_ID
                   FROM schema_name..CAMPAIGN_THIRD_PARTY_DETAIL a
                   WHERE RELEASED_FOR_PROCESSING_FLAG = 'Y'
                   AND   OWNER_LEVEL = 'P') P 
               LEFT JOIN (SELECT DISTINCT CAMPAIGN_ID,
                                 a.OWNER_NAME AS SECONDARY_OWNER,
                                 OWNER_ID
                          FROM schema_name..CAMPAIGN_THIRD_PARTY_DETAIL a
                          WHERE RELEASED_FOR_PROCESSING_FLAG = 'Y'
                          AND   OWNER_LEVEL = 'S'
                          AND   OWNER_ID = (SELECT MAX(OWNER_ID)
                                            FROM schema_name..CAMPAIGN_THIRD_PARTY_DETAIL b
                                            WHERE a.campaign_id = b.campaign_id
                                            AND   OWNER_LEVEL = 'S'
                                            AND   RELEASED_FOR_PROCESSING_FLAG = 'Y')) S ON P.CAMPAIGN_ID = S.CAMPAIGN_ID) O ON C.campaign_id = O.campaign_ID
WHERE ((PERC_DIFF_DSK_UA > 10 OR PERC_DIFF_DSK_UA < -10) OR (PERC_DIFF_MBL_UA > 10 OR PERC_DIFF_MBL_UA < -10) OR (PERC_DIFF_UA > 10 OR PERC_DIFF_UA < -10))
OR    ((PERC_DIFF_DSK_IMPR > 10 OR PERC_DIFF_DSK_IMPR < -10) OR (PERC_DIFF_MBL_IMPR > 10 OR PERC_DIFF_MBL_IMPR < -10) OR (PERC_DIFF_IMPR > 10 OR PERC_DIFF_IMPR < -10))
ORDER BY a.CAMPAIGN_ID;
