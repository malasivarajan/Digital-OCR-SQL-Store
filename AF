/***************************************************************************************************************
AUTHOR              :  Mala Sivarajan
PURPOSE             :  script for pulling the DAR sharing and non coverage factors using three months panel data 
SERVER/DB URL PROD  :  jdbc:oracle:thin:@//daysolocrp001.enterprisenet.org:1521/grpprd for cookies, 
                       jdbc:netezza://nantz40.nielsen.com:5480/MCH_NOCR_PROD_PG1
                       jdbc:netezza://nantz77.nielsen.com:5480/gdap_us for panel demo and activities, 
                       jdbc:netezza://nantz77.nielsen.com:5480/scratch for craeting and pulling the factors
TABLES		          :  phx_201.cl1_user_login_adj (cookies table),cookie_member_map , outlier_weight_brand (impressions weights),ETL_DEVICE_SHARING_IMPRESSION_ADJUSTMENT_FACTOR_HISTORY (sharing demo id), 
        	             gdap_us..mp_rn_demo (panel demo),gdap_us..ba_display (panel activities),def..mp_channel_tree_view (info about brand,channel) 
******************************************************************************************************************/        	             
/****************************************************************************************************************
STEP 1 :PULLING 7 MONTHS OF FB COOKIES FOR ADJUSTMENT FACTOR CALC FROM GRPPRD ORACLE DATABASE
****************************************************************************************************************/
drop table DS_fb_session2_220150101; -- to get FB Cookies for the last 7 months 
create table DS_fb_session2_220150101 as   
SELECT  meter_id, computer_id, pcses_id,module_name, 	
            login_value  cookie_value, --cookie value is called login value in this table
            TO_CHAR(local_time, 'MM-YYYY') start_month,       
            TO_CHAR(local_time, 'MM-DD-YYYY') start_date, 
            TO_CHAR(local_time, 'MM-DD-YYYY HH24:MI:SS') start_time, 
            TO_CHAR(NVL (LEAD (local_time, 1) OVER (PARTITION BY meter_id,computer_id,module_name
            ORDER BY local_time), TO_DATE('01-31-2015 00:00:00', 'mm-dd-yyyy  HH24:MI:SS')+ 1) - (1 / 86400), 'MM-DD-YYYY HH24:MI:SS')  end_time
            FROM     phx_201.cl1_user_login_adj
            WHERE   login_name = 'c_user'   --- FB users
            AND login_value <> 'deleted'    --- exclude the deleted cookies
            AND MODULE_NAME IN ('FIREFOX.EXE', 'CHROME.EXE', 'IEXPLORE.EXE','PLUGIN-CONTAINER.EXE', 'GOOGLE CHROME','FIREFOX'	) -- added PLUGIN AND REMOVED SAFARI
            AND pcses_id IS NOT NULL        ---- excluding invalid sessions
            AND TO_CHAR(local_time, 'MM-YYYY') in ('07-2014','08-2014','09-2014','10-2014','11-2014','12-2014','01-2015')   -- 7 months of cookies;   
            
select * from DS_fb_session2_220150101 limit 100;

/****************************************************************************************************************
STEP 2 :GETTING THE RN_ID FOR THE FB COOKIES
****************************************************************************************************************/
drop table MSCI_DS_cookie_map; 
create table MSCI_DS_cookie_map as 
select period_id, cookie_value, meter_id, b.member_id, 10000*b.meter_id + 100*b.member_id  as rn_id
from phx_201.cookie_member_map b;
--note: RN_ID combines the meter_id with the member_id

select * from  MSCI_DS_cookie_map;

/****************************************************************************************************************
STEP 3 :GETTING THE OUTLIER WEIGHTS FOR IMPRESSION CALCULATION
****************************************************************************************************************/

Select * from OUTLIER_WEIGHT_BRAND;

/****************************************************************************************************************
STEP 4 :GETTING THE DEMOGRAPHIC ID AND SHARING DEMOGRAPHIC IDS FROM NANTZ 40 (MCH_NOCR_WORK) DATABASE FOR THE SHARING MATRIX
****************************************************************************************************************/        
drop table DS_SHARED_DEMO_TABLE;      
create table DS_SHARED_DEMO_TABLE as 
select DISTINCT DEMOGRAPHIC_ID,SHARED_DEMOGRAPHIC_ID
from MCH_NOCR_PROD_PG1..ETL_DEVICE_SHARING_IMPRESSION_ADJUSTMENT_FACTOR_HISTORY 
where demographic_id not in (301,302,303,304) and SHARED_DEMOGRAPHIC_ID not in (301,302,303,304) ;
commit;

select * from DS_SHARED_DEMO_TABLE;

/**************************************************************************************************************
SAS Script to copy from GRPPRD Oracle Database to Nantz13 - RUN IN SAS
****************************************************************************************************************/
libname grpprd ORACLE user=PHX_201 password='grprd#201' path=grpprd schema=PHX_201;
libname nz77  netezza database=scratch  user=______ password=_____ server='nantz77.nielsen.com'  port=5480; -- User specific
libname nz40  netezza database=MCH_NOCR_WORK  user=______ password=_____ server='nantz40.nielsen.com'  port=5480; -- User specific

data nz77.MSci_DS_fb_session2_220130901;  --THIS IS BRINGING IN ALL THE COOKIES FROM THE TIME PERIOD WE NEED
set grpprd.MSci_DS_fb_session2_220130901; 
run; 

data nz77.MSCI_DS_cookie_map; 
set grpprd.MSCI_DS_cookie_map; 
run; 

data nz77.MSCI_DS_qa_outlier_brand;
set grpprd.OUTLIER_WEIGHT_BRAND; 
run; 

data nz77.DS_SHARED_DEMO_TABLE;
set nz40.DS_SHARED_DEMO_TABLE; 
run; 
/****************************************************************************************************************
NANTZ 77 PART
****************************************************************************************************************/ 
--------------Checking all the tables if they have been copied correctly
select * from DS_SHARED_DEMO_TABLE;
Select * from OUTLIER_WEIGHT_BRAND;
select * from DS_fb_session2_220150101 limit 100;
select * from  MSCI_DS_cookie_map;

/****************************************************************************************************************
STEP 5: CREATING OCR DEMO LOOKUP TABLE FOR AGE AND GENDER RE_DISTRIBUTION
****************************************************************************************************************/  
drop table temp_vg_demo_lookup_New;
create table temp_vg_demo_lookup_New
(DEMO_ID smallInt,
demo_age_min smallInt,
demo_age_max smallInt,
demo_gender smallInt,
gender VARCHAR(20));
commit;

select * from temp_vg_demo_lookup_New ;

insert into temp_vg_demo_lookup_New values (4,2,12,2,'F') ;
insert into temp_vg_demo_lookup_New values (12,15,17,2,'F') ;
insert into temp_vg_demo_lookup_New values (13,18,20,2,'F') ;
insert into temp_vg_demo_lookup_New values (14,21,24,2,'F') ;
insert into temp_vg_demo_lookup_New values (15,25,29,2,'F') ;
insert into temp_vg_demo_lookup_New values (17,30,34,2,'F') ;
insert into temp_vg_demo_lookup_New values (18,35,39,2,'F') ;
insert into temp_vg_demo_lookup_New values (20,40,44,2,'F') ;
insert into temp_vg_demo_lookup_New values (21,45,49,2,'F') ;
insert into temp_vg_demo_lookup_New values (22,50,54,2,'F') ;
insert into temp_vg_demo_lookup_New values (23,55,64,2,'F') ;
insert into temp_vg_demo_lookup_New values (24,65,999,2,'F') ;
insert into temp_vg_demo_lookup_New values (50,2,12,1,'M') ;
insert into temp_vg_demo_lookup_New values (56,15,17,1,'M') ;
insert into temp_vg_demo_lookup_New values (57,18,20,1,'M') ;
insert into temp_vg_demo_lookup_New values (58,21,24,1,'M') ;
insert into temp_vg_demo_lookup_New values (59,25,29,1,'M') ;
insert into temp_vg_demo_lookup_New values (61,30,34,1,'M') ;
insert into temp_vg_demo_lookup_New values (62,35,39,1,'M') ;
insert into temp_vg_demo_lookup_New values (64,40,44,1,'M') ;
insert into temp_vg_demo_lookup_New values (65,45,49,1,'M') ;
insert into temp_vg_demo_lookup_New values (66,50,54,1,'M') ;
insert into temp_vg_demo_lookup_New values (67,55,64,1,'M') ;
insert into temp_vg_demo_lookup_New values (68,65,999,1,'M') ;
commit;

select * from temp_vg_demo_lookup_New;

/****************************************************************************************************************
DECLARING VARIABLES SINCE THE PROCEDURE HAS TO BE REPEATED FOR THREE ROLLING PREVIOUS MONTHS
****************************************************************************************************************/  
--NOV 2014
WbVarDef period_id=220141101;
WbVarDef start_date=2014-11-01;
WbVarDef end_date=2014-12-01;
WbVarDef cut_off_date=2014-07-01;
WbVarDef char_period_id='M20141101';
WbVarDef short_period_id=20141101;

--Dec 2014
WbVarDef period_id=220141201;
WbVarDef start_date=2014-12-01;
WbVarDef end_date=2015-01-01;
WbVarDef cut_off_date=2014-07-01;
WbVarDef char_period_id='M20141201';
WbVarDef short_period_id=20141201;

--Jan 2015
WbVarDef period_id=220150101;
WbVarDef start_date=2015-01-01;
WbVarDef end_date=2015-01-01;
WbVarDef cut_off_date=2014-07-01;
WbVarDef char_period_id='M20150101';
WbVarDef short_period_id=20150101;
/****************************************************************************************************************
STEP 6: JOINING THE COOKIE-PANELIST TABLE WITH DEMO TABLE AND ASSIGNING FB AGE AND GENDER FOR THE COOKIES
****************************************************************************************************************/  
drop table DS_cookie_session_demo_$[period_id];   
create table DS_cookie_session_demo_$[period_id] as
select CAST(a2.meter_id AS varchar(11)) meter_id, a2.member_id, CAST(a2.rn_id AS BIGINT) rn_id, a1.computer_id, a1.pcses_id, a1.module_name, a1.cookie_value, 
       a1.start_time::datetime start_time, a1.end_time::DATETIME end_time, b.gender_id fb_gender, b.age fb_age, c.demo_id
    from DS_fb_session2_220150101 a1
    join DS_cookie_map a2 using (cookie_value, meter_id)
    join def..mp_rn_demo b using (rn_id)
    join temp_vg_demo_lookup_New c on (b.gender_id = c.demo_gender)
    where   b.age >= c.demo_age_min 
    and     b.age <= c.demo_age_max
    and     end_time::date    >= '$[start_date]'  
    and     start_time::date  <  '$[end_date]' 
    and     start_time::date  >= '$[cut_off_date]'    -- last 7 months of the cookies
    and     b.period_id       =  '$[char_period_id]' 
    and     a2.period_id      =  '$[short_period_id]'  
    and     b.surf_location_id = 1  -- surfing from Home
    and     b.country_code_id = 31  --  Country US
    order by a1.meter_id, a1.computer_id, a1.module_name 
    distribute on random;
    commit;
    
select * from  DS_cookie_session_demo_$[period_id] limit 100;
/****************************************************************************************************************
STEP 7: GETTING THE ACTIVITIES OF NON-FACEBOOK USERS BY BRAND AND CHANNEL FOR TRUTH CALCULATION 
****************************************************************************************************************/  
drop table DS_ba_display_$[period_id];
create table DS_ba_display_$[period_id] as
select '$[period_id]' period_id, rn_id, instance_id, surf_location_id, computer_id, date_trunc('second',b.local_time) local_time, duration, pcses_id, module_name, 
        brand_id, b.tree_id, v.channel_id, v.tree_level
from gdap_us..ba_display b        
    join    def..mp_channel_tree_view v on v.tree_id = b.tree_id 
    where   period_id = '$[period_id]'    
            and   rn_prefix = 201      -- 201 panel
            and   xflag = 0
            and   b.tree_id <> 1240715 -- Brand or channel <> Facebook
            and   v.local_time::date = '$[start_date]'
            and   v.tree_level<>'P'    -- excluding the parent
    order by rn_id, local_time
    distribute on (rn_id);
    commit;
    
select * from DS_ba_display_$[period_id] limit 100;
/****************************************************************************************************************
STEP 7: ASSIGNING THE TRUTH DEMOS FOR THE NON-FB USERS 
****************************************************************************************************************/  
drop table DS_prod_rnlist_$[period_id] ;
create table DS_prod_rnlist_$[period_id] as
select distinct rn_id, meter_id, gender_id,age,demo_id, '2'||substr(period_id,2,9) period_id
from    def..mp_rn_demo a 
join   temp_vg_demo_lookup_New  b on (a.gender_id = b.demo_gender)
where   surf_location_id = 1
        and   substr (meter_id,1,3) = 201
        and   '2' || substr(period_id, 2, 9) = $[period_id]
        and   a.age between demo_age_min and demo_age_max and period_id like 'M%' 
order by rn_id
distribute on (rn_id);
commit;

select * from  DS_prod_rnlist_$[period_id] limit 100;
/****************************************************************************************************************
STEP 8: PULLING THE OULIER WEIGHTS FOR THE IMPRESSIONS RATIO CALCULATIONS
****************************************************************************************************************/ 
drop table DS_prod_rnw_brand_$[period_id];
create table DS_prod_rnw_brand_$[period_id] as
select tree_id brand_id, period_id, rn_id, outlier_weight
from  OUTLIER_WEIGHT_BRAND
where period_id = $[period_id]
distribute on random;
commit;

select * from DS_prod_rnw_brand_$[period_id] limit 100;
/****************************************************************************************************************
STEP 8: JOINING THE TRUTH DEMOS AND THE ACTIVITIES FOR THE NON-FB USERS 
****************************************************************************************************************/
drop table DS_truth_$[period_id]; 
create table DS_truth_$[period_id] 
as select   a.instance_id, a.period_id, substr(a.period_id,6,2) month_number, a.local_time, a.duration, a.brand_id, a.tree_id, a.channel_id, a.tree_level, 
            a.rn_id, b.gender_id, b.age, b.demo_id truth_demo_id, 
            a.computer_id, substr(a.rn_id,1,11) as meter_id, a.module_name
from   DS_ba_display_$[period_id] a
join   DS_prod_rnlist_$[period_id] b using (rn_id, period_id)
order by meter_id,a.computer_id,a.module_name
distribute on random;
commit;

select * from DS_truth_$[period_id] limit 100;
/****************************************************************************************************************
STEP 8: COMBINING THE BRAND LEVEL TRUTH PANELISTS WITH FB PANELISTS USING COMPUTER ID, METER ID, MODULE NAME and COOKIE LOGIN DURATION 
****************************************************************************************************************/
drop table DS_brand_raw_$[period_id]; 
create table DS_brand_raw_$[period_id]
as select x.*, c.cookie_value fb_cookie, fb_gender, fb_age, demo_id fb_demo_id, nvl(w.outlier_weight,1) as PVS
from DS_truth_$[period_id] x 
left join DS_cookie_session_demo_$[period_id] c on (c.computer_id = x.computer_id and c.meter_id = x.meter_id and c.module_name = x.module_name and x.local_time 
>= c.start_time and x.local_time <= c.end_time)
left join   DS_prod_rnw_brand_$[period_id] w on (x.rn_id = w.rn_id and x.period_id = w.period_id and x.brand_id = w.brand_id)  
distribute on random;
commit;

select * from DS_brand_raw_$[period_id] limit 100;
/****************************************************************************************************************
STEP 8: COMBINING THE CHANNEL LEVEL TRUTH PANELISTS WITH FB PANELISTS USING COMPUTER ID, METER ID, MODULE NAME and COOKIE LOGIN DURATION 
****************************************************************************************************************/
drop table DS_channel_raw_$[period_id]; 
create table DS_channel_raw_$[period_id]
as select   x.*, c.cookie_value fb_cookie, fb_gender, fb_age, demo_id fb_demo_id, nvl(w.outlier_weight,1) as PVS
from        DS_truth_$[period_id] x 
left join   DS_cookie_session_demo_$[period_id] 
c on (c.computer_id = x.computer_id and c.meter_id = x.meter_id and c.module_name = x.module_name and x.local_time 
>= c.start_time and x.local_time <= c.end_time)
left join   DS_prod_rnw_brand_$[period_id] 
w on (x.rn_id = w.rn_id and x.period_id = w.period_id and x.channel_id = w.brand_id) 
where x.channel_id is not null ;
commit;

select * from DS_channel_raw_$[period_id] limit 100;

/*Database Performance tunning*/
generate statistics on DS_brand_raw_$[period_id]
generate statistics on DS_channel_raw_$[period_id]
-------------------------------------------------------------------------------------------------------------------------------------------------
/*old methodology --- Updated 4/10/2015
drop table DS_brand_$[period_id]; -- calculating Brand level Truth UA, Truth_PVS
create table DS_brand_$[period_id] as
select i.brand_id, truth_demo_id demo_id,truth_ua, fb_ua, case when truth_ua>0 then fb_ua/truth_ua else null end factor_ua 
from 
     (select brand_id, truth_demo_id, sum(nvl(pvs,1)) truth_pvs_adj, count(distinct rn_id) truth_ua
     from DS_brand_raw_$[period_id]
     group by brand_id, truth_demo_id) i
left join 
      (select brand_id, fb_demo_id, sum(nvl(pvs,1)) fb_pvs_adj, count(distinct fb_cookie) fb_ua
      from DS_brand_raw_$[period_id]
      where fb_cookie is not null
      group by brand_id, fb_demo_id) f on (i.truth_demo_id = f.fb_demo_id and i.brand_id = f.brand_id)
order by brand_id, demo_id;
commit;
select * from DS_brand_$[period_id] limit 100;
------------------------------------------------------------------------------------------------------------------------------------
drop table DS_channel_$[period_id]; -- calculating Channel level Truth UA, Truth_PVS
create table DS_channel_$[period_id] as
select i.channel_id, truth_demo_id demo_id, 

       truth_ua, fb_ua, case when truth_ua>0 then fb_ua/truth_ua else null end factor_ua 
from 
     (select channel_id, truth_demo_id, sum(nvl(outlier_weight,1)) truth_pvs_adj, count(distinct rn_id) truth_ua
     from DS_channel_raw_$[period_id]
     group by channel_id, truth_demo_id) i
left join 
      (select channel_id, fb_demo_id, sum(nvl(outlier_weight,1)) fb_pvs_adj, count(distinct fb_cookie) fb_ua
      from DS_channel_raw_$[period_id]
      where fb_cookie is not null
      group by channel_id, fb_demo_id) f on (i.truth_demo_id = f.fb_demo_id and i.channel_id = f.channel_id)
order by channel_id, demo_id;
select * from DS_channel_$[period_id] limit 100;*/
--------------------------------------------------------------------------------------------------------
/*drop table DS_subcat_brand_$[period_id];
create table DS_subcat_brand_$[period_id] as
select mv_cat_id, demo_id, sum(truth_pvs_adj) truth_pvs_adj, sum(fb_pvs_adj) fb_pvs_adj, sum(truth_ua) truth_ua, sum(fb_ua) fb_ua 
from    (select b.*, t.mv_cat_id from DS_brand_$[period_id] b 
        left join def..mp_channel_tree_view t using(brand_id)
        where t.tree_level='S' and t.local_time::date='$[start_date]') sub
where mv_cat_id is not null 
group by mv_cat_id, demo_id
order by mv_cat_id, demo_id;
select * from DS_subcat_brand_$[period_id] where MV_CAT_ID= 1000000002 ;
select * from DS_subcat_brand_$[period_id]_1 where MV_CAT_ID= 1000000002 ;
--------------------------------------------------------------------------------------------------------
drop table DS_subcat_channel_$[period_id];
create table DS_subcat_channel_$[period_id] as
select mv_cat_id, demo_id, sum(truth_pvs_adj) truth_pvs_adj, sum(fb_pvs_adj) fb_pvs_adj,sum(truth_ua) truth_ua, sum(fb_ua) fb_ua 
from    (select b.*, t.mv_cat_id from DS_channel_$[period_id] b 
        left join def..mp_channel_tree_view t using(channel_id)
        where t.local_time::date='$[start_date]') sub
where mv_cat_id is not null
group by mv_cat_id, demo_id
order by mv_cat_id, demo_id;
commit;
select * from DS_subcat_channel_$[period_id] limit 100;*/

/****************************************************************************************************************
STEP 9: CALCULATING UA AND PAGEVIEWS MISATTRIBUTION SHARING MATRIX BY BRAND 
****************************************************************************************************************/
WbVarDef period_id=220141201;
WbVarDef start_date=2014-12-01;

select * from DS_brand_raw_$[period_id] where BRAND_ID=1627 and TRUTH_DEMO_ID=12 ;

drop table DS_brand_shared_$[period_id];
create table DS_brand_shared_$[period_id] as
select case when b.BRAND_id is null then a.brand_id else b.brand_id end brand_id,demographic_id,SHARED_DEMOGRAPHIC_ID,UA,PVS from 
(select DEMOGRAPHIC_ID,SHARED_DEMOGRAPHIC_ID,t.Brand_ID  from DS_SHARED_DEMO_TABLE a
cross join --- cross join is to pull all the Brand IDs across all Sharing demos 
(select distinct Brand_id from def..mp_channel_tree_view 
        where tree_level='S' --- BRAND LEVEL
        and local_time::date='$[start_date]')t /*where BRAND_ID=416151*/)a
left join
(select brand_ID,TRUTH_DEMO_ID,FB_DEMO_ID,count(distinct rn_id) as UA,Sum(PVS) as PVS 
       from DS_brand_raw_$[period_id] a 
       --BRAND_ID=416151 and
        where fb_cookie is not null  --- Panelist with FB cookie available for Misattribution calc.
group by brand_id,TRUTH_DEMO_ID,FB_DEMO_ID) b on b.TRUTH_DEMO_ID=a.DEMOGRAPHIC_ID and SHARED_DEMOGRAPHIC_ID=FB_DEMO_ID and a.brand_ID=b.brand_ID
DISTRIBUTE ON RANDOM;
commit;

select * from DS_brand_shared_$[period_id] --where pvs is not null limit 100
where BRAND_ID=260335;
/****************************************************************************************************************
STEP 9: CALCULATING UA AND PAGEVIEWS MISATTRIBUTION SHARING MATRIX BY CHANNEL
****************************************************************************************************************/
select * from DS_Channel_raw_$[period_id] where Channel_ID=442674 and TRUTH_DEMO_ID=12 ;

drop table DS_channel_shared_$[period_id];
create table DS_channel_shared_$[period_id] as
select case when b.Channel_id is null then a.Channel_id else b.Channel_id end Channel_id,demographic_id,SHARED_DEMOGRAPHIC_ID,UA,PVS from 
(select DEMOGRAPHIC_ID,SHARED_DEMOGRAPHIC_ID,t.Channel_ID from DS_SHARED_DEMO_TABLE a 
cross join 
(select distinct Channel_id from def..mp_channel_tree_view 
        where tree_level='C'  --- Channel level
        and local_time::date='$[start_date]')t /*where Channel_ID=442674*/)a  left join
(select Channel_ID,TRUTH_DEMO_ID,FB_DEMO_ID,count(distinct rn_id) as UA,Sum(PVS) as PVS 
       from DS_Channel_raw_$[period_id] a    
       where /*Channel_ID=442674 
       and */fb_cookie is not null --- Panelist with FB cookie available for Misattribution calc.
group by Channel_id,TRUTH_DEMO_ID,FB_DEMO_ID) b on b.TRUTH_DEMO_ID=a.DEMOGRAPHIC_ID and SHARED_DEMOGRAPHIC_ID=FB_DEMO_ID and a.channel_id=b.channel_id
DISTRIBUTE ON RANDOM;
commit;

select sum(pvs) from DS_channel_shared_$[period_id] --where pvs is not null limit 100
where Channel_ID=1094614 and DEMOGRAPHIC_ID=4;

/****************************************************************************************************************
STEP 10: CALCULATING UA AND PAGEVIEWS MISATTRIBUTION SHARING MATRIX BY SUBCAT BRAND
****************************************************************************************************************/
drop table DS_subcat_brand_shared_$[period_id];
create table DS_subcat_brand_shared_$[period_id] as
select case when b.mv_cat_id is null then a.mv_cat_id else b.mv_cat_id end mv_cat_id,demographic_id,SHARED_DEMOGRAPHIC_ID,UA,PVS from 
(select DEMOGRAPHIC_ID,SHARED_DEMOGRAPHIC_ID,t.mv_cat_id from DS_SHARED_DEMO_TABLE a 
cross join 
(select distinct mv_cat_id from def..mp_channel_tree_view 
        where local_time::date='$[start_date]' 
        and mv_cat_id is not null)t /*where mv_cat_id=11000000004*/)a 
left join
(select mv_cat_id,TRUTH_DEMO_ID,FB_DEMO_ID,count(distinct rn_id) as UA,Sum(PVS) as PVS 
       from DS_brand_raw_$[period_id] a  left join def..mp_channel_tree_view t using(brand_id) 
       where t.tree_level='S' 
       and t.local_time::date='$[start_date]' 
       /*and a.BRAND_ID=416151*/
       and fb_cookie is not null  --- Panelist with FB cookie available for Misattribution calc.
       and mv_cat_id is not null  --- exclude categories which are null
group by mv_cat_id,TRUTH_DEMO_ID,FB_DEMO_ID) b on b.TRUTH_DEMO_ID=a.DEMOGRAPHIC_ID and SHARED_DEMOGRAPHIC_ID=FB_DEMO_ID and a.mv_cat_id=b.mv_cat_id
DISTRIBUTE ON RANDOM;
commit;

select * from DS_subcat_brand_shared_$[period_id] --where pvs is not null limit 100
where mv_cat_id=11000000004 ;
/****************************************************************************************************************
STEP 11: CALCULATING UA AND PAGEVIEWS MISATTRIBUTION SHARING MATRIX BY SUBCAT CHANNEL
****************************************************************************************************************/ 
drop table DS_subcat_Channel_shared_$[period_id];
create table DS_subcat_Channel_shared_$[period_id] as
select case when b.mv_cat_id is null then a.mv_cat_id else b.mv_cat_id end mv_cat_id,demographic_id,SHARED_DEMOGRAPHIC_ID,UA,PVS from 
(select DEMOGRAPHIC_ID,SHARED_DEMOGRAPHIC_ID,t.mv_cat_id from DS_SHARED_DEMO_TABLE a
cross join 
(select distinct mv_cat_id from def..mp_channel_tree_view 
        where local_time::date='$[start_date]' and mv_cat_id is not null)t /*where mv_cat_id=12000000001*/)a 
left join
(select mv_cat_id,TRUTH_DEMO_ID,FB_DEMO_ID,count(distinct rn_id) as UA,Sum(PVS) as PVS 
       from DS_Channel_raw_$[period_id] a left join def..mp_channel_tree_view t using(channel_id) 
       where t.tree_level='C' 
       and t.local_time::date='$[start_date]' 
       /*and a.Channel_ID=442674 */
       and fb_cookie is not null  --- Panelist with FB cookie available for Misattribution calc.
       and mv_cat_id is not null  --- exclude categories which are null
group by mv_cat_id,TRUTH_DEMO_ID,FB_DEMO_ID) b on b.TRUTH_DEMO_ID=a.DEMOGRAPHIC_ID and SHARED_DEMOGRAPHIC_ID=FB_DEMO_ID and a.mv_cat_id=b.mv_cat_id
DISTRIBUTE ON RANDOM;
commit;

select * from DS_subcat_brand_shared_$[period_id] --where pvs is not null limit 100
where mv_cat_id=12000000001;
/*********************************************************************************************************************
STEP 12: Iterate the brand level script for three months and Combine all three months and calc brand level sharing matrix AF
**********************************************************************************************************************/ 
select * from DS_brand_shared_220150101;

drop table DS_brand_Shared_AF_JAN2015;
create table DS_brand_Shared_AF_JAN2015 as
select brand_id,DEMOGRAPHIC_ID,  SHARED_DEMOGRAPHIC_ID,nvl(shared_ua,0) shared_ua,nvl(Shared_PVS,0) as Shared_PVS ,
sum(nvl(Shared_PVS,0)) over (partition by brand_id,DEMOGRAPHIC_ID) SUM_TRUTH_PVS,decode(SUM_TRUTH_PVS,0,0,nvl(Shared_PVS,0)/SUM_TRUTH_PVS) factor_pvs from (
select  brand_id,DEMOGRAPHIC_ID,  SHARED_DEMOGRAPHIC_ID, sum(ua)  shared_ua, sum(PVS) Shared_PVS from 
    (select * from DS_brand_shared_220141101 
     union all
     select * from DS_brand_shared_220141201 
     union all
     select * from DS_brand_shared_220150101) sub
group by brand_id,DEMOGRAPHIC_ID,  SHARED_DEMOGRAPHIC_ID)a 
order by brand_id,DEMOGRAPHIC_ID,  SHARED_DEMOGRAPHIC_ID;
commit;

select * from DS_brand_Shared_AF_JAN2015 where BRAND_ID=260335;
/*******************************************************************************************************************************
STEP 13: Iterate the Channel level script for three months and Combine all three months and calc Channel level sharing matrix AF
********************************************************************************************************************************/ 
drop table DS_channel_shared_AF_JAN2015;
create table DS_channel_shared_AF_JAN2015 as
select channel_id,DEMOGRAPHIC_ID,  SHARED_DEMOGRAPHIC_ID,nvl(shared_ua,0) shared_ua,nvl(Shared_PVS,0) as Shared_PVS ,
sum(nvl(Shared_PVS,0)) over (partition by channel_id,DEMOGRAPHIC_ID) SUM_TRUTH_PVS,decode(SUM_TRUTH_PVS,0,0,nvl(Shared_PVS,0)/SUM_TRUTH_PVS) factor_pvs from (
select  Channel_id,DEMOGRAPHIC_ID,  SHARED_DEMOGRAPHIC_ID, sum(ua)  shared_ua, sum(PVS) Shared_PVS from 
    (select * from DS_Channel_shared_220141101 
     union all
     select * from DS_Channel_shared_220141201
     union all
     select * from DS_Channel_shared_220150101) sub
group by Channel_id,DEMOGRAPHIC_ID,  SHARED_DEMOGRAPHIC_ID)a
order by Channel_id,DEMOGRAPHIC_ID,  SHARED_DEMOGRAPHIC_ID;
commit;

/*select sum(pvs) from DS_Channel_shared_220141101  where Channel_ID=1094614 and DEMOGRAPHIC_ID=4
     union all
     select sum(pvs) from DS_Channel_shared_220141201 where Channel_ID=1094614 and DEMOGRAPHIC_ID=4
     union all
     select sum(pvs) from DS_Channel_shared_220150101 where Channel_ID=1094614 and DEMOGRAPHIC_ID=4*/

select * from DS_channel_shared_AF_JAN2015 where Channel_ID=1094614 ;--limit 100;
/************************************************************************************************************************************************************
STEP 14: Iterate the Subcat Brand and Subcat Channel level script for three months and Combine all three months and calc Subcategory level sharing matrxi AF
*************************************************************************************************************************************************************/ 
drop table DS_subcat_shared_AF_JAN2015;
create table DS_subcat_shared_AF_JAN2015 as
select mv_cat_id,DEMOGRAPHIC_ID,  SHARED_DEMOGRAPHIC_ID,nvl(shared_ua,0) shared_ua,nvl(Shared_PVS,0) as Shared_PVS ,
sum(nvl(Shared_PVS,0)) over (partition by mv_cat_id,DEMOGRAPHIC_ID) SUM_TRUTH_PVS,decode(SUM_TRUTH_PVS,0,0,nvl(Shared_PVS,0)/SUM_TRUTH_PVS) factor_pvs from (
select mv_cat_id, DEMOGRAPHIC_ID,  SHARED_DEMOGRAPHIC_ID,sum(ua)  shared_ua, sum(PVS) Shared_PVS from
(select *,  'brand' as type from DS_subcat_brand_shared_220141101
union all
select *,   'brand' as type  from DS_subcat_brand_shared_220141201
union all
select *,   'brand' as type  from DS_subcat_brand_shared_220150101
union all
select *,   'channel' as type  from DS_subcat_channel_shared_220141101
union all
select *,   'channel' as type  from DS_subcat_channel_shared_220141201
union all
select *,   'channel' as type  from DS_subcat_channel_shared_220150101) sub
group by mv_cat_id, DEMOGRAPHIC_ID,  SHARED_DEMOGRAPHIC_ID)a
order by mv_cat_id, DEMOGRAPHIC_ID,  SHARED_DEMOGRAPHIC_ID;
commit;

select * from DS_subcat_shared_AF_JAN2015 where mv_cat_id=11000000004 ;-- limit 100;

/*************************************************************************************************************************************
STEP 15: Combine all three months brand Pageviews and UA and calculate default level sharing matrix AF
**************************************************************************************************************************************/ 
drop table DS_default_shared_AF_JAN2015;
create table DS_default_shared_AF_JAN2015 as
select DEMOGRAPHIC_ID,  SHARED_DEMOGRAPHIC_ID,nvl(shared_ua,0) shared_ua,nvl(Shared_PVS,0) as Shared_PVS ,
sum(nvl(Shared_PVS,0)) over (partition by DEMOGRAPHIC_ID) SUM_TRUTH_PVS,decode(SUM_TRUTH_PVS,0,0,nvl(Shared_PVS,0)/SUM_TRUTH_PVS) factor_pvs from(
select  DEMOGRAPHIC_ID,SHARED_DEMOGRAPHIC_ID, sum(ua) shared_ua, sum(PVS) Shared_PVS from 
    (select DEMOGRAPHIC_ID,SHARED_DEMOGRAPHIC_ID, sum(ua) ua, sum(PVS) PVS from DS_brand_shared_220141101 group by 
DEMOGRAPHIC_ID,SHARED_DEMOGRAPHIC_ID
    union all
    select DEMOGRAPHIC_ID,SHARED_DEMOGRAPHIC_ID,sum(ua) ua, sum(PVS) PVS from DS_brand_shared_220141201 group by 
DEMOGRAPHIC_ID,SHARED_DEMOGRAPHIC_ID
    union all
    select DEMOGRAPHIC_ID, SHARED_DEMOGRAPHIC_ID,sum(ua) ua, sum(PVS) PVS from DS_brand_shared_220150101 group by 
DEMOGRAPHIC_ID,SHARED_DEMOGRAPHIC_ID) sub
group by DEMOGRAPHIC_ID,SHARED_DEMOGRAPHIC_ID)a
order by DEMOGRAPHIC_ID,SHARED_DEMOGRAPHIC_ID;
commit;

select * from  DS_default_shared_AF_JAN2015;
/*************************************************************************************************************************************
STEP 16: CALCULATING NON COVERAGE UA AND PAGEVIEWS AT BRAND LEVEL
**************************************************************************************************************************************/ 
drop table DS_brand_noncov_$[period_id];
create table DS_brand_noncov_$[period_id] as
select brand_id,demographic_id,NC_UA,NC_PVS,UA,PVS from 
(select brand_ID,TRUTH_DEMO_ID as demographic_id,count(distinct case when fb_cookie is null then rn_id end) as NC_UA,--- Panelist with no FB cookie available for Non-coverage calc.
       Sum(case when fb_cookie is null then PVS end) as NC_PVS,   --- Pageviews of panelists witn no FB Cookie
       count(distinct rn_id) as UA,                               --- all Panelist with or without fb cookie
       sum(PVS) PVS                                               --- Pageviews of all panelists 
       from DS_brand_raw_$[period_id] a 
       --where BRAND_ID=416151 
group by brand_id,TRUTH_DEMO_ID) b 
DISTRIBUTE ON RANDOM;
commit;

select * from DS_brand_noncov_$[period_id] where BRAND_ID=416151 ;
/*************************************************************************************************************************************
STEP 17: CALCULATING NON COVERAGE UA AND PAGEVIEWS AT CHANNEL LEVEL
**************************************************************************************************************************************/ 
drop table DS_channel_noncov_$[period_id];
create table DS_channel_noncov_$[period_id] as
select Channel_id,demographic_id,NC_UA,NC_PVS,UA,PVS from 
(select Channel_ID,TRUTH_DEMO_ID  as demographic_id,count(distinct case when fb_cookie is null then rn_id end) as NC_UA,
       Sum(case when fb_cookie is null then PVS end) as NC_PVS,  --- Panelist with no FB cookie available for Non-coverage calc.
       count(distinct rn_id) as UA,                              --- all Panelist with or without fb cookie
       sum(PVS) PVS                                              --- pvs of all panelists
       from DS_Channel_raw_$[period_id] a    
       --where Channel_ID=442674 
group by Channel_id,TRUTH_DEMO_ID) b 
DISTRIBUTE ON RANDOM;
commit;

select * from DS_channel_noncov_$[period_id] where Channel_ID=442674;
/*************************************************************************************************************************************
STEP 19: CALCULATING NON COVERAGE UA AND PAGEVIEWS AT  SUBCATEGORY BRAND LEVEL
**************************************************************************************************************************************/ 
drop table DS_subcat_brand_noncov_$[period_id];
create table DS_subcat_brand_noncov_$[period_id] as
select mv_cat_id, demographic_id,NC_UA,NC_PVS,UA,PVS from
(select mv_cat_id,TRUTH_DEMO_ID as demographic_id,count(distinct case when fb_cookie is null then rn_id end) as NC_UA,
       Sum(case when fb_cookie is null then PVS end) as NC_PVS,  --- Panelist with no FB cookie available for Non-coverage calc.
       count(distinct rn_id) as UA,
       sum(PVS) PVS
       from DS_brand_raw_$[period_id] a  
       left join def..mp_channel_tree_view t using(brand_id) 
       where t.tree_level='S' and t.local_time::date='$[start_date]' /*and a.BRAND_ID=416151 */and mv_cat_id is not null
group by mv_cat_id,TRUTH_DEMO_ID) b
DISTRIBUTE ON RANDOM;
commit;
select * from DS_subcat_brand_noncov_$[period_id];
/*************************************************************************************************************************************
STEP 20: CALCULATING NON COVERAGE UA AND PAGEVIEWS AT  SUBCATEGORY CHANNEL LEVEL
**************************************************************************************************************************************/ 
drop table DS_subcat_Channel_noncov_$[period_id];
create table DS_subcat_Channel_noncov_$[period_id] as
select mv_cat_id, demographic_id,NC_UA,NC_PVS,UA,PVS from
(select mv_cat_id,TRUTH_DEMO_ID as demographic_id,count(distinct case when fb_cookie is null then rn_id end) as NC_UA,
       Sum(case when fb_cookie is null then PVS end) as NC_PVS,  --- Panelist with no FB cookie available for Non-coverage calc.
       count(distinct rn_id) as UA,
       sum(PVS) PVS
       from DS_Channel_raw_$[period_id] a 
       left join def..mp_channel_tree_view t using(channel_id) 
       where t.tree_level='C' and t.local_time::date='$[start_date]'/* and a.Channel_ID=442674  */and mv_cat_id is not null
group by mv_cat_id,TRUTH_DEMO_ID) b 
DISTRIBUTE ON RANDOM;
commit;

select * from DS_subcat_Channel_noncov_$[period_id];
/*************************************************************************************************************************************
STEP 21: ITERATE THE NONCOVERAGE BRAND FOR THREE MONTHS AND THEN COMBINE THEM TO CALCULATE NONCOVERAGE BRAND ADJUSTEMENT FACTOR 
**************************************************************************************************************************************/ 
select * from DS_brand_noncov_220150101;

drop table DS_brand_noncov_AF_JAN2015;
create table DS_brand_noncov_AF_JAN2015 as
select brand_id,DEMOGRAPHIC_ID,  nvl(noncov_ua,0) noncov_ua,nvl(noncov_PVS,0) as noncov_PVS ,total_PVS,       
       decode(total_PVS,0,0,(1-nvl(noncov_PVS,0)/total_PVS)) NC_factor_pvs from (
select  brand_id,DEMOGRAPHIC_ID,  sum(ua) total_ua, sum(PVS) total_PVS,sum(nc_ua)  noncov_ua, sum(nc_PVS) noncov_PVS from 
    (select * from DS_brand_noncov_220141101 
     union all
     select * from DS_brand_noncov_220141201
     union all
     select * from DS_brand_noncov_220150101) sub
group by brand_id,DEMOGRAPHIC_ID)a 
order by brand_id,DEMOGRAPHIC_ID;
commit;

select * from DS_brand_noncov_AF_JAN2015 where BRAND_ID=260335--where BRAND_ID=416151 ;
/*************************************************************************************************************************************
STEP 22: ITERATE THE NONCOVERAGE CHANNEL FOR THREE MONTHS AND THEN COMBINE THEM TO CALCULATE NONCOVERAGE CHANNEL ADJUSTEMENT FACTOR 
**************************************************************************************************************************************/ 
drop table DS_channel_noncov_AF_JAN2015;
create table DS_channel_noncov_AF_JAN2015 as
select Channel_id,DEMOGRAPHIC_ID,  nvl(noncov_ua,0) noncov_ua,nvl(noncov_PVS,0) as noncov_PVS ,total_PVS,       
       decode(total_PVS,0,0,(1-nvl(noncov_PVS,0)/total_PVS)) NC_factor_pvs from (
select  Channel_id,DEMOGRAPHIC_ID,  sum(ua) total_ua, sum(PVS) total_PVS,sum(nc_ua)  noncov_ua, sum(nc_PVS) noncov_PVS from 
    (select * from DS_Channel_noncov_220141101  
     union all
     select * from DS_Channel_noncov_220141201  
     union all
     select * from DS_Channel_noncov_220150101) sub
group by Channel_id,DEMOGRAPHIC_ID)a
order by Channel_id,DEMOGRAPHIC_ID;
commit;

select * from DS_channel_noncov_AF_JAN2015 where Channel_ID=1094614 limit 100;
/********************************************************************************************************************************************************
STEP 23: ITERATE THE NONCOVERAGE SUBCAT BRANDS AND CHANNELS FOR THREE MONTHS AND THEN COMBINE THEM TO CALCULATE NONCOVERAGE SUBCATEGORY ADJUSTEMENT FACTOR 
*********************************************************************************************************************************************************/ 
drop table DS_subcat_noncov_AF_JAN2015;
create table DS_subcat_noncov_AF_JAN2015 as
select mv_cat_id,DEMOGRAPHIC_ID,  nvl(noncov_ua,0) noncov_ua,nvl(noncov_PVS,0) as noncov_PVS ,total_PVS,       
       decode(total_PVS,0,0,(1-nvl(noncov_PVS,0)/total_PVS)) NC_factor_pvs from (
select  mv_cat_id,DEMOGRAPHIC_ID,  sum(ua) total_ua, sum(PVS) total_PVS,sum(nc_ua)  noncov_ua, sum(nc_PVS) noncov_PVS from 
(select *,  'brand' as type from DS_subcat_brand_noncov_220141101
union all
select *,   'brand' as type  from DS_subcat_brand_noncov_220141201
union all
select *,   'brand' as type  from DS_subcat_brand_noncov_220150101
union all
select *,   'channel' as type  from DS_subcat_channel_noncov_220141101
union all
select *,   'channel' as type  from DS_subcat_channel_noncov_220141201
union all
select *,   'channel' as type  from DS_subcat_channel_noncov_220150101) sub
group by mv_cat_id, DEMOGRAPHIC_ID)a
order by mv_cat_id, DEMOGRAPHIC_ID;
commit;

select * from DS_subcat_noncov_AF_JAN2015 where MV_CAT_ID= 11000000004 limit 100;

/*************************************************************************************************************************************
STEP 15: Combine all three months brand Non-Coverage Pageviews and UA, calc default level Non-Coverage AF
**************************************************************************************************************************************/ 
drop table DS_default_noncov_AF_JAN2015;
create table DS_default_noncov_AF_JAN2015 as
select DEMOGRAPHIC_ID,  nvl(noncov_ua,0) noncov_ua,nvl(noncov_PVS,0) as noncov_PVS ,total_PVS,       
       decode(total_PVS,0,0,(1-nvl(noncov_PVS,0)/total_PVS)) NC_factor_pvs from (
select  DEMOGRAPHIC_ID,  sum(ua) total_ua, sum(PVS) total_PVS,sum(nc_ua)  noncov_ua, sum(nc_PVS) noncov_PVS from 
    (select DEMOGRAPHIC_ID, sum(ua) ua, sum(PVS) PVS,sum(nc_ua) nc_ua, sum(nc_PVS) nc_PVS from DS_brand_noncov_220141101 group by DEMOGRAPHIC_ID
    union all
    select DEMOGRAPHIC_ID, sum(ua) ua, sum(PVS) PVS,sum(nc_ua) nc_ua, sum(nc_PVS) nc_PVS  from DS_brand_noncov_220141201 group by DEMOGRAPHIC_ID
    union all
    select DEMOGRAPHIC_ID, sum(ua) ua, sum(PVS) PVS,sum(nc_ua) nc_ua, sum(nc_PVS) nc_PVS  from DS_brand_noncov_220150101 group by DEMOGRAPHIC_ID) sub
group by DEMOGRAPHIC_ID)a
order by DEMOGRAPHIC_ID;
commit;

select * from  DS_default_noncov_AF_JAN2015;
